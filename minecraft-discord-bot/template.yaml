AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  minecraft-discord-bot
  Creates a Lambda function suitable to be used as the base for a discord bot.
  The bot is capable of turning on and off a specific EC2 instance.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        MC_INSTANCE_ID: i-0c357ca3a210f5ef8

Resources:
  AlexBotDiscordFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: alex_bot/
      Handler: app.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Events:
        AlexBotDiscordApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /alex
            Method: post
      Role: arn:aws:iam::679942607082:role/lambda-execution-role
      Timeout: 30

  StopperScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(30 minutes)
      FlexibleTimeWindow:
        Mode: FLEXIBLE
        MaximumWindowInMinutes: 5
      Target:
        Arn: !GetAtt ServerStopperFunction.Arn
        RoleArn: !GetAtt StopperSchedulerToServerStopperFunctionRole.Arn

  ServerStopperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stopper
      Handler: app.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Role: arn:aws:iam::679942607082:role/lambda-execution-role
      Timeout: 30
      Events:
        StopperScheduler:
          Type: Schedule
          Properties:
            Schedule: !Ref StopperScheduler

  ServerStopperFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ServerStopperFunction}

  StopperSchedulerToServerStopperFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt ServerStopperFunction.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AlexBotDiscordApi:
    Description: API Gateway endpoint URL for Prod stage for AlexBotDiscord function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  AlexBotDiscordFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt AlexBotDiscordFunction.Arn
